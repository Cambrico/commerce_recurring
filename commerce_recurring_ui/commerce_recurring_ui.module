<?php
/**
 * Admin UI for recurring entities.
 */

/**
* Generates the profile type editing form.
*/
function commerce_recurring_ui_form($form, &$form_state, $recurring_entity, $op = 'edit') {
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => $profile_type->label,
  );
  // Machine-readable type name.
  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($profile_type->type) ? $profile_type->type : '',
    '#disabled' => $profile_type->isLocked(),
    '#machine_name' => array(
      'exists' => 'profile2_get_types',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this profile type. It must only contain lowercase letters, numbers, and underscores.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save recurring entity'),
    '#weight' => 40,
  );
  return $form;
}

/**
* Form API submit callback for the type form.
*/
function commerce_recurring_ui_form_submit(&$form, &$form_state) {
  $recurring_entity = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  $recurring_entity->save();
  $form_state['redirect'] = 'admin/commerce/recurring-entities';
}

/**
 * Entity uri callback: points to the admin view page of the given order.
 */
function commerce_recurring_ui_recurring_uri($order) {
  // First look for a return value in the default entity uri callback.
  $uri = commerce_recurring_uri($order);

  // If a value was found, return it now.
  if (!empty($uri)) {
    return $uri;
  }

  // Only return a value if the user has permission to view the recurrent
  // entity.
  if (commerce_recurring_access('view', $recurring_entity)) {
    return array(
      'path' => 'admin/commerce/recurring-entities/' . $recurring_entity->id,
    );
  }

  return NULL;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_recurring_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the order entity.
  $entity_info['commerce_recurring']['uri callback'] = 'commerce_recurring_ui_recurring_uri';

  // Expose the admin UI for product fields.
  foreach ($entity_info['commerce_recurring']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/commerce/recurring-entities',
      'access arguments' => array('administer commerce_recurring entities'),
    );
  }
      // Enable the entity API's admin UI.
  $entity_info['commerce_recurring']['admin ui'] = array(
    'path' => 'admin/commerce/profiles',
    'file' => 'commerce_recurring.admin.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_recurring_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_recurring_ui') . '/includes/views',
  );
}
