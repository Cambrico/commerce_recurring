<?php

/**
 * @file
 * Defines the recurring entity and associated features.
 */

use Drupal\commerce_recurring\Entity\RecurringTypeInterface;
use Drupal\commerce_recurring\Event\RecurringCronEvent;
use Drupal\Core\Render\Element;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_cron().
 */
function commerce_recurring_cron() {
  $event = new RecurringCronEvent();
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(RecurringCronEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_theme().
 */
function commerce_recurring_theme($existing, $type, $theme, $path) {
  return [
    'commerce_recurring' => [
      'render element' => 'elements',
    ],
    'commerce_recurring__user' => [
      'base hook' => 'commerce_recurring',
      'render element' => 'elements',
    ],
    'commerce_recurring_edit_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Prepares variables for recurring templates.
 *
 * Default template: commerce-recurring.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_recurring(&$variables) {
  /** @var Drupal\commerce_recurring\Entity\RecurringInterface $recurring */
  $recurring = $variables['elements']['#commerce_recurring'];

  $variables['recurring_entity'] = $recurring;
  $variables['recurring'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['recurring'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_commerce_recurring().
 */
function commerce_recurring_theme_suggestions_commerce_recurring(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_recurring', $variables);
}

/**
 * Adds the default order_items field to a recurring type.
 *
 * order items can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each recurring type.
 *
 * @param \Drupal\commerce_recurring\Entity\RecurringTypeInterface $recurring_type
 *   The recurring type.
 */
function commerce_recurring_add_order_items_field(RecurringTypeInterface $recurring_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_recurring', 'order_items');
  $field = FieldConfig::loadByName('commerce_recurring', $recurring_type->id(), 'order_items');

  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'order_items',
      'entity_type' => 'commerce_recurring',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_order_item',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $recurring_type->id(),
      'label' => 'order items',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $form_display = commerce_get_entity_display('commerce_recurring', $recurring_type->id(), 'form');
    $form_display->setComponent('order_items', [
      'type' => 'inline_entity_form_complex',
      'weight' => 5,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'order item',
        'label_plural' => 'order items',
        'allow_new' => TRUE,
        'match_operator' => 'CONTAINS',
        'allow_existing' => FALSE,
        'form_mode' => 'default',
      ],
    ]);
    $form_display->save();

    $view_display = commerce_get_entity_display('commerce_recurring', $recurring_type->id(), 'view');
    $view_display->setComponent('order_items', [
      'type' => 'commerce_recurring_order_item_table',
      'weight' => 9,
      'label' => 'above',
    ]);
    $view_display->save();
  }
}

/**
 * Adds the default recurring_orders field to a recurring type.
 *
 * Recurrings can't be a base field because the Views integration is
 * broken. Instead, it is created as a configurable field for each recurring
 * type.
 *
 * @param \Drupal\commerce_recurring\Entity\RecurringTypeInterface $recurring_type
 *   The recurring type.
 */
function commerce_recurring_add_recurring_orders_field(RecurringTypeInterface $recurring_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_recurring', 'recurring_orders');
  $field = FieldConfig::loadByName('commerce_recurring', $recurring_type->id(), 'recurring_orders');

  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'recurring_orders',
      'entity_type' => 'commerce_recurring',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_order',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $recurring_type->id(),
      'label' => 'Recurrings',
      'required' => FALSE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $form_display = commerce_get_entity_display('commerce_recurring', $recurring_type->id(), 'form');
    $form_display->setComponent('recurring_orders', [
      'type' => 'inline_entity_form_complex',
      'weight' => 6,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'recurring',
        'label_plural' => 'recurrings',
        'allow_new' => FALSE,
        'match_operator' => 'CONTAINS',
        'allow_existing' => TRUE,
        'form_mode' => 'default',
      ],
    ]);
    $form_display->save();

    $view_display = commerce_get_entity_display('commerce_recurring', $recurring_type->id(), 'view');
    $view_display->setComponent('recurring_orders', [
      'type' => 'commerce_recurring_order_table',
      'weight' => 10,
      'label' => 'above',
    ]);
    $view_display->save();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function commerce_recurring_views_data_alter(array &$data) {
  $data['commerce_recurring']['store_id']['field']['id'] = 'commerce_store';
}
